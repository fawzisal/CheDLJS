import { psi, inch, atm } from './fluids.constants.js';
import { is_critical_flow } from './fluids.compressible.js';
import { interp, tck_interp2d_linear, bisplev } from './fluids.numerics_init.js';
let __all__ = ['API526_A_sq_inch', 'API526_letters', 'API526_A', 'API520_round_size', 'API520_C', 'API520_F2', 'API520_Kv', 'API520_N', 'API520_SH', 'API520_B', 'API520_W', 'API520_A_g', 'API520_A_steam'];
export let API526_A_sq_inch = [0.110, 0.196, 0.307, 0.503, 0.785, 1.287, 1.838, 2.853, 3.60, 4.34, 6.38, 11.05, 16.00, 26.00]; // square inches
/*list: Nominal relief area in for different valve sizes in API 520, [in^2]*/
export let API526_letters = ['D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R','T'];
/*list: Letter size designations for different valve sizes in API 520*/
let inch2 = inch*inch;
export let API526_A = API526_A_sq_inch.map((i) => i*inch2);
/*list: Nominal relief area in for different valve sizes in API 520, [m^2]*/
// delete inch2;
export function API520_round_size(A) {
    for( let area of API526_A ) { if( area >= A ) { return area; } }
    throw new Error( 'ValueError - Required relief area is larger than can be provided with one valve' );
}
export function API520_C(k) {
    if( k !== 1 ) { return 0.03948*Math.sqrt(k*(2./(k+1.))**((k+1.)/(k-1.))); }
    else { return 0.03948*Math.sqrt(1./Math.exp(1)); }
}
export function API520_F2({k, P1, P2}) {
    let r = P2/P1;
    return Math.sqrt(k/(k-1)*r**(2./k) * ((1-r**((k-1.)/k))/(1.-r)));
}
export function API520_Kv(Re) { return (0.9935 + 2.878/Math.sqrt(Re) + 342.75/Re**1.5)**-1.0; }
export function API520_N(P1) {
    P1 = P1*1e-3; // Pa to kPa
    let KN;
    if( P1 <= 10339.0 ) { KN = 1.0; }
    else { KN = (0.02764*P1 - 1000.)/(0.03324*P1 - 1061.0); }
    return KN;
}
let _KSH_psigs = [15, 20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300, 350, 400, 500, 600, 800, 1000, 1250, 1500, 1750, 2000, 2500, 3000];
let _KSH_tempFs = [300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200];
// _KSH_psigs converted from psig to Pa
export let _KSH_Pa = [204746.3593975254, 239220.14586336722, 377115.29172673443, 515010.4375901016, 652905.5834534689, 790800.7293168361, 928695.8751802032, 1066591.0210435705, 1204486.1669069377, 1342381.312770305, 1480276.4586336722, 1618171.6044970395, 1756066.7503604065, 1893961.8962237737, 2031857.042087141, 2169752.187950508, 2514490.0526089263, 2859227.9172673444, 3548703.64658418, 4238179.375901016, 5617130.834534689, 6996082.29316836, 8719771.616460452, 10443460.939752541, 12167150.263044631, 13890839.58633672, 17338218.232920904, 20785596.879505083];
// _KSH_tempFs converted from F to K
export let _KSH_tempKs = [422.03888888888889, 477.59444444444443, 533.14999999999998, 588.70555555555552, 644.26111111111106, 699.81666666666661, 755.37222222222226, 810.92777777777769, 866.48333333333335, 922.03888888888889];
let _KSH_factors = [[1, 0.98, 0.93, 0.88, 0.84, 0.8, 0.77, 0.74, 0.72, 0.7], [1, 0.98, 0.93, 0.88, 0.84, 0.8, 0.77, 0.74, 0.72, 0.7], [1, 0.99, 0.93, 0.88, 0.84, 0.81, 0.77, 0.74, 0.72, 0.7], [1, 0.99, 0.93, 0.88, 0.84, 0.81, 0.77, 0.75, 0.72, 0.7], [1, 0.99, 0.93, 0.88, 0.84, 0.81, 0.77, 0.75, 0.72, 0.7], [1, 0.99, 0.94, 0.89, 0.84, 0.81, 0.77, 0.75, 0.72, 0.7], [1, 0.99, 0.94, 0.89, 0.84, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 0.99, 0.94, 0.89, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 0.99, 0.94, 0.89, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 0.99, 0.94, 0.89, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 0.99, 0.95, 0.89, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 0.99, 0.95, 0.89, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.95, 0.9, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.95, 0.9, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.96, 0.9, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.96, 0.9, 0.85, 0.81, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.96, 0.9, 0.86, 0.82, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.96, 0.91, 0.86, 0.82, 0.78, 0.75, 0.72, 0.7], [1, 1, 0.96, 0.92, 0.86, 0.82, 0.78, 0.75, 0.73, 0.7], [1, 1, 0.97, 0.92, 0.87, 0.82, 0.79, 0.75, 0.73, 0.7], [1, 1, 1, 0.95, 0.88, 0.83, 0.79, 0.76, 0.73, 0.7], [1, 1, 1, 0.96, 0.89, 0.84, 0.78, 0.76, 0.73, 0.71], [1, 1, 1, 0.97, 0.91, 0.85, 0.8, 0.77, 0.74, 0.71], [1, 1, 1, 1, 0.93, 0.86, 0.81, 0.77, 0.74, 0.71], [1, 1, 1, 1, 0.94, 0.86, 0.81, 0.77, 0.73, 0.7], [1, 1, 1, 1, 0.95, 0.86, 0.8, 0.76, 0.72, 0.69], [1, 1, 1, 1, 0.95, 0.85, 0.78, 0.73, 0.69, 0.66], [1, 1, 1, 1, 1, 0.82, 0.74, 0.69, 0.65, 0.62]];
let API520_KSH_tck = tck_interp2d_linear(_KSH_tempKs, _KSH_Pa, _KSH_factors);
export function API520_SH({T1, P1}) {
    // 20679E3+atm
    if( P1 > 20780325.0 ) { throw new Error( 'ValueError - For P above 20679 kPag, use the critical flow model' ); }
    if( T1 > 922.15 ) { throw new Error( 'ValueError - Superheat cannot be above 649 degrees Celcius' ); }
    // No superheat under 15 psig
    if( T1 < 422.15 ) { return 1.; }
    return bisplev(T1, P1, API520_KSH_tck);
}
// Kw, for liquids. Applicable for all overpressures.
let Kw_x = [15., 16.5493, 17.3367, 18.124, 18.8235, 19.5231, 20.1351, 20.8344, 21.4463, 22.0581, 22.9321, 23.5439, 24.1556, 24.7674, 25.0296, 25.6414, 26.2533, 26.8651, 27.7393, 28.3511, 28.9629, 29.6623, 29.9245, 30.5363, 31.2357, 31.8475, 32.7217, 33.3336, 34.0329, 34.6448, 34.8196, 35.4315, 36.1308, 36.7428, 37.7042, 38.3162, 39.0154, 39.7148, 40.3266, 40.9384, 41.6378, 42.7742, 43.386, 43.9978, 44.6098, 45.2216, 45.921, 46.5329, 47.7567, 48.3685, 49.0679, 49.6797, 50.];
let Kw_y = [1, 0.996283, 0.992565, 0.987918, 0.982342, 0.976766, 0.97119, 0.964684, 0.958178, 0.951673, 0.942379, 0.935874, 0.928439, 0.921933, 0.919145, 0.912639, 0.906134, 0.899628, 0.891264, 0.884758, 0.878253, 0.871747, 0.868959, 0.862454, 0.855948, 0.849442, 0.841078, 0.834572, 0.828067, 0.821561, 0.819703, 0.814126, 0.806691, 0.801115, 0.790892, 0.785316, 0.777881, 0.771375, 0.76487, 0.758364, 0.751859, 0.740706, 0.734201, 0.727695, 0.722119, 0.715613, 0.709108, 0.702602, 0.69052, 0.684015, 0.677509, 0.671004, 0.666357];
export function API520_W({Pset, Pback}) {
    let gauge_backpressure = (Pback-atm)/(Pset-atm)*100.0; // in percent
    if( gauge_backpressure < 15.0 ) { return 1.0; }
    return interp(gauge_backpressure, Kw_x, Kw_y);
}
// Kb Backpressure correction factor, for gases
let Kb_16_over_x = [37.6478, 38.1735, 38.6991, 39.2904, 39.8817, 40.4731, 40.9987, 41.59, 42.1156, 42.707, 43.2326, 43.8239, 44.4152, 44.9409, 45.5322, 46.0578, 46.6491, 47.2405, 47.7661, 48.3574, 48.883, 49.4744, 50.0];
let Kb_16_over_y = [0.998106, 0.994318, 0.99053, 0.985795, 0.982008, 0.97822, 0.973485, 0.96875, 0.964962, 0.961174, 0.956439, 0.951705, 0.947917, 0.943182, 0.939394, 0.935606, 0.930871, 0.926136, 0.921402, 0.918561, 0.913826, 0.910038, 0.90625];
let Kb_10_over_x = [30.0263, 30.6176, 31.1432, 31.6689, 32.1945, 32.6544, 33.18, 33.7057, 34.1656, 34.6255, 35.0854, 35.5453, 36.0053, 36.4652, 36.9251, 37.385, 37.8449, 38.2392, 38.6334, 39.0276, 39.4875, 39.9474, 40.4074, 40.8016, 41.1958, 41.59, 42.0499, 42.4442, 42.8384, 43.2326, 43.6925, 44.0867, 44.4809, 44.8752, 45.2694, 45.6636, 46.0578, 46.452, 46.8463, 47.2405, 47.6347, 48.0289, 48.4231, 48.883, 49.2773, 49.6715];
let Kb_10_over_y = [0.998106, 0.995265, 0.99053, 0.985795, 0.981061, 0.975379, 0.969697, 0.963068, 0.957386, 0.950758, 0.945076, 0.938447, 0.930871, 0.925189, 0.918561, 0.910985, 0.904356, 0.897727, 0.891098, 0.883523, 0.876894, 0.870265, 0.862689, 0.856061, 0.848485, 0.840909, 0.83428, 0.827652, 0.820076, 0.8125, 0.805871, 0.798295, 0.79072, 0.783144, 0.775568, 0.768939, 0.762311, 0.754735, 0.747159, 0.739583, 0.732008, 0.724432, 0.716856, 0.70928, 0.701705, 0.695076];
export function API520_B({Pset, Pback, overpressure=0.1}) {
    let gauge_backpressure = (Pback-atm)/(Pset-atm)*100.0; // in percent
    if( [0.1, 0.16, 0.21].indexOf(overpressure) == -1 ) { throw new Error( 'ValueError - Only overpressure of 10%, 16%, or 21% are permitted' ); }
    if( (overpressure === 0.1 && gauge_backpressure < 30.0) || (
        overpressure === 0.16 && gauge_backpressure < 38.0) || (
        overpressure === 0.21 && gauge_backpressure <= 50.0) ) {
        return 1.0;
    }
    else if( gauge_backpressure > 50.0 ) { throw new Error( 'ValueError - Gauge pressure must be < 50%' ); }
    let Kb;
    if( overpressure === 0.16 ) { Kb = interp(gauge_backpressure, Kb_16_over_x, Kb_16_over_y); }
    else if( overpressure === 0.1 ) { Kb = interp(gauge_backpressure, Kb_10_over_x, Kb_10_over_y); }
    return Kb;
}
export function API520_A_g({m, T, Z, MW, k, P1, P2=101325, Kd=0.975, Kb=1, Kc=1}) {
    [P1, P2] = [P1/1000., P2/1000.]; // Pa to Kpa in the standard
    m = m*3600.; // kg/s to kg/hr
    let A;
    if( is_critical_flow({P1: P1, P2: P2, k: k}) ) {
        let C = API520_C(k);
        A = m/(C*Kd*Kb*Kc*P1)*Math.sqrt(T*Z/MW);
    } else {
        let F2 = API520_F2({k: k, P1: P1, P2: P2});
        A = 17.9*m/(F2*Kd*Kc)*Math.sqrt(T*Z/(MW*P1*(P1-P2)));
    }
    return A*0.001**2; // convert mm^2 to m^2
}
export function API520_A_steam({m, T, P1, Kd=0.975, Kb=1, Kc=1}) {
    let KN = API520_N(P1);
    let KSH = API520_SH({T1: T, P1: P1});
    P1 = P1/1000.; // Pa to kPa
    m = m*3600.; // kg/s to kg/hr
    let A = 190.5*m/(P1*Kd*Kb*Kc*KN*KSH);
    return A*0.001**2; // convert mm^2 to m^2
}
